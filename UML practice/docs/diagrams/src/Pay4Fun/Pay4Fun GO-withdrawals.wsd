@startuml
autonumber

actor Client
actor Manager
participant Terminal
participant UPP
participant PHUB
participant PSA
participant FxBank
participant FxPay
participant dealing
participant Pay4Fun
participant Kafka

== Client flow ==

activate Kafka

Client -> Terminal ++: Click withdrawal
Terminal -> PHUB ++: getWithdrawalPageLink
par

PHUB -> FxPay ++: getPaymentMethodsConfiguration
FxPay --> PHUB --: MethodsConfiguration
PHUB -> FxBank ++: getWithdrawalRequisites
FxBank --> PHUB --: WD requesites
PHUB -> PHUB : build getWithdrawalMethodsDetails
end

PHUB -> UPP ++: authorizeWithdrawal
UPP -> FxBank ++: getWithdrawalRequests
FxBank --> UPP --: requests
UPP -> PHUB --: link
PHUB --> Client --: link to withdrawal page

Client -> UPP: load link in iframe
UPP --> Client: WD requests page

Client -> UPP ++: Click new request
UPP --> Client --: WD page

deactivate Client

Client -> UPP ++: Choose Pay4Fun method\nfill amount, chose requisites, presses press withdraw
UPP -> PHUB ++: requestWithdrawal, method = pay_pay4fungo_out,\naccountCode, accountCurrency, amount, requesiteId
PHUB -> FxBank ++: createWithdrawal
FxBank -> FxBank : create withdrawal
FxBank --> Kafka : psa-?--all: send withdrawal event :created
FxBank --> PHUB --: inProcessing | Incomplete
PHUB --> UPP --: inProcessing | Incomplete
UPP --> Client --: In processing withdrawal page

== Process withdrawal request ==

FxBank -> dealing ++: changeBalance with operation PAYMENT_OPERATION
activate FxBank
dealing --> FxBank --:  operationId and operationDate
FxBank -> FxBank : Set balance according to dealing response 
FxBank -> Kafka --: fxbank--all: withdrawal :sent

Kafka -> PHUB ++: withdrawal: sent
PHUB -> Kafka --: payment-hub--all: makeTransfer
Kafka --> PSA ++: makeTransfer
PSA -> Pay4Fun ++: <b><font color=green>POST: /1.0/goout/screening/
Pay4Fun --> PSA --: <b><font color=green>/1.0/goout/screening/ response \n(redirect URL)
PSA -> PSA : update transfer with redirect URL
PSA --> Kafka --: psa-?--all: send comand to send email

...
== Process email ==
Kafka -> NotificationService ++: get event
NotificationService -> Client --: send email
Client -> Pay4Fun ++: Complete screening
Pay4Fun --> Client --: Result page

== Screening webhook ==

Pay4Fun -> PSA ++: <b><font color=green>status
PSA -> PSA : update transfer
PSA --> Kafka :  psa-?--all: transfer event
PSA --> Pay4Fun : <b><font color=green>HTTP 200
alt invoice.status = 201 (screening is succeeded)
PSA -> Pay4Fun ++: <b><font color=green>POST: /1.0/goout/process/
Pay4Fun --> PSA --: <b><font color=green>/1.0/goout/process/ response \n(redirect URL)
PSA -> PSA : update transfer with redirect URL
PSA --> Kafka --: psa-?--all: send transfer type = outcomeTransfer, \nstatus=inProgress
else
PSA --> Kafka --: psa-?--all: send transfer type = outcomeTransfer, \nstatus=failed
end
Kafka --> PHUB :  psa-?--all: send transfer type = outcomeTransfer, \nstatus=succeded/failed

...
== Payouts webhook ==
Pay4Fun -> PSA ++: <b><font color=green>status
PSA -> PSA : update transfer
PSA --> Kafka :  psa-?--all: transfer event
PSA --> Pay4Fun : <b><font color=green>HTTP 200

...
== Statements ==
    loop loop by async operation configuration
    PSA -> Pay4Fun ++: <b><font color=green>GET: Get payment status /1.0/goout/transaction/
    activate PSA
    Pay4Fun --> PSA --: <b><font color=green>status
    PSA -> PSA: update transfer
    PSA --> Kafka --:  psa-?--all: transfer event
    Kafka --> PHUB : psa-?--all: send transfer type = outcomeTransfer, \nstatus=succeeded/failed
    deactivate PSA
end loop

...
== Convertation ==
Kafka -> PHUB ++: psa-?--all: read transfer event
PHUB --> Kafka --: payment-hub--all: send transfer event

Kafka -> FxBank ++: payment-hub--all: read transfer event
alt : status == successful
FxBank -> FxBank : Convert crypto -> fiats
end
FxBank -> FxBank: save/update withdrawal entity\nchange account balance
FxBank --> Kafka --: fxbank--all: withdrawal event

deactivate Kafka

@enduml
