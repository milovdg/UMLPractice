@startuml
autonumber

actor Client
actor Manager
participant Terminal
participant PHUB
participant FxBank
participant UPP
participant FxPay
participant PSA
participant dealing
participant GrowPayments
participant Kafka
participant Bank

== Client flow ==

activate Kafka

Client -> Terminal ++: Click withdrawal
Terminal -> PHUB ++: getWithdrawalPageLink
par

PHUB -> FxPay ++: getPaymentMethodsConfiguration
FxPay --> PHUB --: MethodsConfiguration
PHUB -> FxBank ++: getWithdrawalRequisites
FxBank --> PHUB --: WD requesites
PHUB -> PHUB : build getWithdrawalMethodsDetails
end

PHUB -> UPP ++: authorizeWithdrawal
UPP -> FxBank ++: getWithdrawalRequests
FxBank --> UPP --: requests
UPP -> PHUB --: link
PHUB --> Client --: link to withdrawal page

Client -> UPP: load link in iframe
UPP --> Client: WD requests page

Client -> UPP ++: Click new request
UPP --> Client --: WD page

deactivate Client

Client -> UPP ++: Choose Grow payments method\nfill amount, chose requisites, presses press withdraw
UPP -> PHUB ++: requestWithdrawal, method = pay_growpayments_out,\naccountCode, accountCurrency, amount, requesiteId
PHUB -> FxBank ++: createWithdrawal
FxBank -> FxBank : create withdrawal
FxBank --> Kafka : psa-?--all: send withdrawal event :created
FxBank --> PHUB --: inProcessing | Incomplete
PHUB --> UPP --: inProcessing | Incomplete
UPP --> Client --: In processing withdrawal page

== Process withdrawal request ==

FxBank -> dealing ++: changeBalance with operation PAYMENT_OPERATION
activate FxBank
dealing --> FxBank --:  operationId and operationDate
FxBank -> FxBank : Set balance according to dealing response 
FxBank -> Kafka --: fxbank--all: withdrawal :sent

Kafka -> PHUB ++: withdrawal: sent
PHUB -> Kafka --: payment-hub--all: makeTransfer
Kafka --> PSA ++: makeTransfer

PSA -> GrowPayments ++: <b><font color=green>POST: /api/v3/withdrawal/request
GrowPayments --> PSA --: <b><font color=green> /api/v3/withdrawal/request response \n

PSA -> GrowPayments ++: <b><font color=green>POST: api/v3/withdrawal/create
GrowPayments --> PSA --: <b><font color=green> api/v3/withdrawal/create response \n

loop until status <> 1 || status <> 2
PSA -> GrowPayments ++: <b><font color=green>POST: api/v3/withdrawal/check/status
GrowPayments --> PSA --: <b><font color=green> api/v3/withdrawal/check/status response \n
end
PSA --> PHUB --: payout status
PHUB --> UPP --: payout status
UPP --> Client-- : payout status

Client -> Bank ++: Check card account balance
Bank --> Client --: Checked

Click -> UPP ++: confirm receiving money
UPP -> PHUB ++: request payout confirmation
PHUB -> PSA ++: request payout confirmation
PSA -> GrowPayments ++: <b><font color=green>POST: api/v3/withdrawal/confirm
GrowPayments --> PSA --:  <b><font color=green>POST: api/v3/withdrawal/confirm
PSA --> PHUB --: confirmed
PHUB --> UPP --: confirmed
UPP --> Client --: confirmed

PSA --> Kafka --: psa-?--all: send transfer type = outcomeTransfer, \nstatus=succeeded/failed

deactivate PSA

...
== Statements ==
    loop loop by async operation configuration
    PSA -> GrowPayments ++: <b><font color=green>GET: Get payment status api/v3/withdrawal/check/status
    activate PSA
    GrowPayments --> PSA --: <b><font color=green>status
    PSA -> PSA: update transfer
    PSA --> Kafka --:  psa-?--all: transfer event
    Kafka --> PHUB : psa-?--all: send transfer type = outcomeTransfer, \nstatus=succeeded/failed
    deactivate PSA
end loop

@enduml
