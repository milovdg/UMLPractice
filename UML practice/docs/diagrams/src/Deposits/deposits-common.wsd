@startuml deposit-common.jpg
scale max 8192 height
autonumber
legend top left
  Common deposit sequence diagram except:
  - KYT
  - Merchant bank requisites and invoices
  - Free payments
  - Generating crypto addresses
  - Push payments (fiat, crypto)
  - Approve for holding deposits (BLRD)
  - Import of bank payments
end legend

actor Client
participant APP
participant PHUB
participant PSA
participant FxPay
participant FxBank
participant UPP
participant AAA
participant preAmounts
participant AB
participant secretsVault
participant tokenProvider as "tokenex.com"
participant PS as "EPG \n+other provider"
participant bonusService
participant clientService
participant clientProfileService
participant transliterateService as "transliterate"
participant dealing
participant Kafka


== Get deposit page link ==

Client -> APP : click deposit
activate Client
activate APP
activate Kafka
APP -> PHUB : call getDepositPageLink
note right
    accountCode
    accountCurrency
    success/fail url
    restriction url
    iframe url
end note
activate PHUB

PHUB -> AAA : checkSession
activate AAA
AAA --> PHUB : session details
deactivate AAA

par
PHUB -> FxPay: getPaymentMethodsConfiguration
activate FxPay
FxPay --> PHUB: methodsConfiguration
deactivate FxPay
PHUB -> FxBank : depositInterest
activate FxBank
FxBank --> PHUB : Ok
deactivate FxBank

PHUB -> FxBank : getDepositMethodsRestrictions
activate FxBank
FxBank --> PHUB : Ok|Restriction
deactivate FxBank
end

alt Has restrictions
PHUB --> APP : DepositNotAllowed
APP --> Client : KYC forms
Client --> Client : KYC forms
note right
Fill restrictions from
getDepositMethodsRestrictions
Again call getDepositPageLink
end note

else No restrictions
PHUB -> UPP : authorizeDeposit
note right
    accountCode
    accountCurrency
    success/fail url
    restriction url
    iframe url
    deposit methods detail (FxPay)
    session (AAA)
end note
activate UPP
UPP -> UPP: generate link
UPP --> PHUB : link to UPP page
UPP -> UPP: start preload
deactivate UPP
PHUB --> APP : RedirectToLink
deactivate PHUB
APP --> Client : link to deposit page
deactivate APP
end



== Preload data for deposit page during client redirect ==

UPP -> UPP : continue preload
activate UPP
par
opt methods with payment gateway == EPG are exists
UPP -> PS : auth request for each currency
activate PS
PS --> UPP : auth token for currency
deactivate PS

UPP -> PS : expressCheckoutV2 request for each currency
activate PS
PS --> UPP : list of EPG methods
deactivate PS
end

UPP -> AB : call /determine
activate AB
AB --> UPP : tests
deactivate AB

alt Has tests
UPP -> preAmounts : getPredefinedAmountsDefault
activate preAmounts
preAmounts --> UPP : pre amounts \nmin amounts
deactivate preAmounts

else No tests
UPP -> preAmounts : getPredefinedAmounts
activate preAmounts
preAmounts --> UPP : pre amounts \nmin amounts
deactivate preAmounts
end

UPP -> clientService : getLifecycleState
activate clientService
clientService --> UPP : lifecycle state
deactivate clientService

UPP -> FxBank : getAccountInfo
activate FxBank
FxBank --> UPP : trade accounts
deactivate FxBank



group wait for EPG methods and pre amounts
UPP -> UPP : merge preamonts with on min/max of methods

UPP -> bonusService : calculateBonus for preamounts
activate bonusService
bonusService --> UPP : bonuses
deactivate bonusService
end

group wait for getAccountInfo and getLifecycleState
UPP -> AB : determine with: \n-broker, gateway, language, country (session) \n-clientState (getLifecycleState) \n-libertexGroup (getAccountInfo)
activate AB
AB --> UPP : AB experiments
deactivate AB
end

opt methods with token provider
UPP -> UPP : take parameters from config \nfor front-end integration
UPP -> secretsVault : get secret for tokenex.com
activate secretsVault
secretsVault --> UPP : secret to validate token HMAC \nand to generate authenticationKey
deactivate secretsVault
UPP -> UPP : prepare config for TokenEx iframe
end

deactivate UPP
end



== Open deposit page ==

Client -> UPP : go to link
activate UPP
UPP -> UPP : wait for preloads
note left
    Wait only for:
    - auth (EPG)
    - expressCheckoutV2 (EPG)
    - getProfile
    - getAccountInfo
end note

opt methods with token provider
UPP -> tokenProvider : tokenex js
activate tokenProvider
tokenProvider --> UPP
deactivate tokenProvider
end
UPP -> UPP : build page attributes

UPP --> Client : deposit page
deactivate UPP
deactivate Client
deactivate FxPay

...
== Init/change method/amount/currency ==

opt is crypto push method
    Client -> UPP : Init/change method (getCryptoAddress)
    activate Client
    activate UPP
    UPP -> PHUB: getOptionalFieldsValues
    activate PHUB
    PHUB -> PSA: getOptionalFieldValues
    activate PSA
    PSA -> FxPay: getCryptoAddress (get or generate requisite)
    activate FxPay
    FxPay -> FxPay : try to find in DB
    alt no saved crypto requisites
    FxPay -> PS: generate crypto requisite (ATOM)
    activate PS
    PS --> FxPay: crypto requisites
    deactivate PS
    end
    FxPay --> PSA: crypto requisite
    deactivate FxPay
    PSA --> PHUB: crypto requisite
    deactivate PSA
    PHUB --> UPP: crypto requisite
    deactivate PHUB
    UPP --> Client: crypto requisite
    deactivate UPP
    deactivate Client

end


opt is EPG method

    Client -> PS: Init/change method/currency (cashier)
    activate Client
    activate PS
    PS ->> Client: list of methods and saved accounts
    deactivate PS
    Client -> Client: show EPG details by method
    deactivate Client
end

opt methods with token provider
alt deposit with existing card number
    UPP -> UPP: show Vault iframe to tie CVV to an existing token
    activate UPP
    UPP --> Client: show iframe
    activate Client
    deactivate UPP

else deposit with new card number
    UPP -> UPP: show Vault iframe to add card number with cvv
    activate UPP
    UPP -> UPP: show fields to collect \ncard name, exp date
    UPP --> Client: show iframe
    deactivate UPP
    deactivate Client
end
end

Client -> UPP : Init/change method/amount/currency (getDepositInfo)
activate Client
par
    activate UPP
    UPP -> PHUB : calculateDepositParameters
    activate PHUB
    PHUB -> PHUB : calculate payment provider
    PHUB -> FxBank : payment_calculator_api/v3/2/calculateDepositParameters
    activate FxBank
    FxBank -> PHUB : commission, compensation, \nconversion rate
    deactivate FxBank
    PHUB --> UPP : commission, compensation, \nconversion rate
    deactivate PHUB


    UPP -> bonusService : calculateBonus
    activate bonusService
    bonusService --> UPP : bonus
    deactivate bonusService
end
UPP --> Client: commission, compensation, conversion rate, bonus
deactivate UPP
deactivate Client



...
== Submit deposit form ==

alt method payment gateway == EPG
Client -> PS : submit deposit details (prepay|quickpay)
activate Client
activate PS
PS --> Client: prepay token
deactivate PS


else methods with token provider
Client -> tokenProvider : iframe.validate() card number, cvv
activate tokenProvider
tokenProvider ->> Client: token, card mask, card type
deactivate tokenProvider

Client -> tokenProvider : iframe.tokenize() card number, cvv
activate tokenProvider
tokenProvider ->> Client: token, card mask, card type
deactivate tokenProvider
end


Client -> UPP : submit deposit details
activate UPP
alt methods with token provider
UPP -> UPP : validate HMAC \nbefore trusting the token value
end


UPP -> PHUB : requestDeposit
deactivate UPP
activate PHUB

par
PHUB -> FxBank : depositInterest
activate FxBank
FxBank --> PHUB : Ok
deactivate FxBank

PHUB -> FxBank : profile_api/v3/getProfile
activate FxBank
FxBank --> PHUB : profile
deactivate FxBank

PHUB -> FxBank : getDepositRestrictions
activate FxBank
FxBank --> PHUB : Ok | Restricted
deactivate FxBank
end

alt Has restrictions
PHUB --> UPP: DepositNotAllowed
deactivate PHUB
UPP --> Client: redirect by restriction url \n with continueUrl to UPP
Client --> Client : KYC forms
note right
Fill restrictions from
getDepositRestrictions
end note
Client -> UPP: redirect by continueUrl
UPP -> UPP : reinit http session by token
note left
again start with requestDeposit call
end note

else No restrictions
PHUB -> FxBank : createTransaction \nwith requisite params card mask, card type, token
activate PHUB
activate FxBank
FxBank -> Kafka : deposit:created
FxBank --> PHUB: merchantTransactionId, requisiteId
deactivate FxBank

PHUB -> PSA : createIncomeTransfer

alt payment gateway == EPG
activate PSA
PSA -> clientService : getLifecycleState

activate clientService
clientService --> PSA : lifecycle state
deactivate clientService

PSA -> clientProfileService : getLastTouchChannel
activate clientProfileService
clientProfileService --> PSA : marketing info
deactivate clientProfileService

PSA -> transliterateService : transliterate some fields
activate transliterateService
transliterateService --> PSA : result
deactivate transliterateService

end
activate PSA
PSA -> PS : create invoice
activate PS

alt methods with token provider
PSA -> tokenProvider : detokenization and \ntokenization
activate tokenProvider
tokenProvider -> PS : add card to invoice\n /payment/sale
PS --> tokenProvider
tokenProvider --> PSA : transaction details and status
deactivate tokenProvider
end




PS --> PSA : invoice
deactivate PS
PSA --> PHUB : incomeTransferId
PSA -> Kafka : transfer event, type=Income status=created
deactivate PSA
PSA --> PHUB : incomeTransferId, link, \nresultCode=Ok,RedirectToLink
deactivate PSA


PHUB --> UPP : incomeTransferId/link to PS \nresultCode=Ok,RedirectToLink
deactivate PHUB
activate UPP

UPP --> Client : redirect page \nto provider side or result page
deactivate UPP
deactivate Client
end

...
== Return to result page ==

Client -> UPP: return from PS or after requestDeposit
activate Client
activate UPP
UPP -> PHUB : updateIncomeTransferWithDetails
activate PHUB

opt transaction not in final status
PHUB -> PSA : updateIncomeTransfer
activate PSA
PSA -> PS : get status
activate PS
PS --> PSA : payment status with details
deactivate PS
PSA -> PSA : store status in DB
PSA -> Kafka : transfer event, type=Income status=inProgress/succeded/failed
PSA --> PHUB : transfer
deactivate PSA


Kafka --> FxBank : transfer event, type=Income status=inProgress/succeded/failed
activate FxBank
FxBank -> FxBank : deposit: pending/succeeded/failed
deactivate FxBank
end

opt is result code from PS exists
PHUB -> FxBank : get message by result code\n(getResultDetails)
activate FxBank
FxBank --> PHUB : message for client
deactivate FxBank
end

PHUB --> UPP: transaction details and status
deactivate PHUB
UPP --> Client: result page
deactivate Client
deactivate UPP


...
== Update operation status from PS==
alt kafka / webhook

PS -> PSA : send new operation status
activate PS
deactivate PS
activate PSA
PSA -> PSA : store status in DB
PSA -> Kafka: transfer event, status=inProgress/succeeded/failed
deactivate PSA
Kafka --> FxBank : transfer event, type=Income status=inProgress/succeded/failed
activate FxBank
FxBank -> FxBank : deposit: pending/succeeded/failed
deactivate FxBank


else request status


PSA -> PS: get status
activate PSA
activate PS
PS --> PSA: payment status with details
PSA -> PSA : store status in DB
deactivate PS
PSA -> Kafka : transfer event, status=inProgress/succeeded/failed
deactivate PSA
Kafka --> FxBank : transfer event, type=Income status=inProgress/succeded/failed
activate FxBank
FxBank -> FxBank : deposit: pending/succeeded/failed
deactivate FxBank
end


...
== Status of incomeTransfer entity changed ==

Kafka --> FxBank : transfer event, type=Income status=inProgress/succeded/failed
activate FxBank


opt incomeTransfer = inProgress
    FxBank -> FxBank : update deposit
else incomeTransfer = failed
    FxBank -> FxBank : update deposit
    FxBank -> Kafka: deposit:failed
else incomeTransfer = succeeded
    FxBank -> FxBank : check deposit restrictions (BLRD)
    opt if restricted
        FxBank -> FxBank : update deposit
        FxBank -> Kafka : deposit:holding
    else no restricted
        FxBank -> FxBank : update deposit
        FxBank -> Kafka: deposit:receiving
        FxBank -> FxBank : convert amount to account currency
        FxBank -> FxBank : take commission
        loop 10 tries
            FxBank -> dealing : changeBalance with operation PAYMENT_OPERATION
            activate dealing
            dealing --> FxBank : operationId and operationDate
            deactivate dealing
        end
        FxBank -> FxBank : set balance from dealing responce
        FxBank -> FxBank : update deposit
        FxBank -> Kafka : compensation:accrued
        FxBank -> Kafka: deposit:succeeded
    end
end
deactivate FxBank
@enduml
